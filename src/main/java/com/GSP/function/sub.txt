package com.GSP.function;

/*
 * 二元运算符节点
 */
public class BinaryOperatorNode extends ExpressionNode {
    private String operator;
    private ExpressionNode left, right;

    public BinaryOperatorNode(String operator, ExpressionNode left, ExpressionNode right) {
        this.operator = operator;
        this.left = left;
        this.right = right;
    }

    @Override
    public double evaluate(double x) {
        double leftVal = left.evaluate(x);
        double rightVal = right.evaluate(x);

        return switch (operator) {
            case "+" -> leftVal + rightVal;
            case "-" -> leftVal - rightVal;
            case "*" -> leftVal * rightVal;
            case "/" -> {
                if (Math.abs(rightVal) < 1e-10) {
                    throw new ArithmeticException("Division by Zero");
                }
                yield leftVal / rightVal;
            }
            case "^" -> Math.pow(leftVal, rightVal);
            default -> throw new UnsupportedOperationException("Unknown operator: " + operator);
        };
    }

    @Override
    public ExpressionNode derivative() {
        return switch(operator) {
            case "+" -> new BinaryOperatorNode("+", left.derivative(), right.derivative());

            case "-" -> new BinaryOperatorNode("-", left.derivative(), right.derivative());

            case "*" -> new BinaryOperatorNode("+",
                new BinaryOperatorNode("*", left.derivative(), right),
                new BinaryOperatorNode("*", left, right.derivative()));

            case "/" -> new BinaryOperatorNode("/",
                    new BinaryOperatorNode("-",
                        new BinaryOperatorNode("*", left.derivative(), right),
                new BinaryOperatorNode("*", left, right.derivative())),
                new BinaryOperatorNode("^", right, new ConstantNode(2)));
                
            case "^" -> new BinaryOperatorNode("*",
                new BinaryOperatorNode("^", left, right),
                new BinaryOperatorNode("+",
                    new BinaryOperatorNode("*", right.derivative(), new FunctionNode("ln", left)),
                    new BinaryOperatorNode("*", right, new BinaryOperatorNode("/", left.derivative(), left))));
                    
            default -> throw new UnsupportedOperationException("Unknown operator: " + operator);
        };
    }

    @Override
    public String toString() {
        String leftStr = left.toString();
        String rightStr = right.toString();
        
        // 优化括号的使用
        boolean needLeftParen = left instanceof BinaryOperatorNode &&
            (getPrecedence(((BinaryOperatorNode) left).operator) < getPrecedence(operator) ||
             (getPrecedence(((BinaryOperatorNode) left).operator) == getPrecedence(operator) && 
              !isAssociative(operator)));
              
        boolean needRightParen = right instanceof BinaryOperatorNode &&
            (getPrecedence(((BinaryOperatorNode) right).operator) < getPrecedence(operator) ||
             getPrecedence(((BinaryOperatorNode) right).operator) == getPrecedence(operator));
        
        return (needLeftParen ? "(" : "") + leftStr + (needLeftParen ? ")" : "") + 
               operator + 
               (needRightParen ? "(" : "") + rightStr + (needRightParen ? ")" : "");
    }

    // 获取运算符优先级
    private int getPrecedence(String op) {
        return switch(op) {
            case "+", "-" -> 1;
            case "*", "/" -> 2;
            case "^" -> 3;
            default -> 0;
        };
    }

    // 判断运算符是否满足结合律
    private boolean isAssociative(String op) {
        return switch(op) {
            case "+", "*" -> true;
            case "-", "/", "^" -> false;
            default -> false;
        };
    }

    public ExpressionNode getLeft() {
        return left;
    }
    
    public ExpressionNode getRight() {
        return right;
    }

    public String getOperator() {
        return operator;
    }
}


package com.GSP.function;

public class ComplexFunction extends Function {
    
    private MathExpression expression;
    private String expressionString;

    public ComplexFunction() {

    }

    public ComplexFunction(String expression) {
        this.expression = new MathExpression(expression);
        expressionString = this.expression.toString();
        System.out.println(expressionString);
    }

    @Override
    public double evaluate(double x) {
        return expression.evaluate(x);
    }

    @Override
    public Function derivative() {
        MathExpression deriExpression = this.expression.derivative();
        ComplexFunction deri = new ComplexFunction();
        deri.expression = deriExpression;
        deri.expressionString = deriExpression.toString();
        return deri;
    }

    @Override
    public String toString() {
        return expressionString;
    }
}

package com.GSP.function;

/*
 * 本类用于存放常数节点
 */
public class ConstantNode extends ExpressionNode {
    private double value;

    public ConstantNode(double value) {
        this.value = value;
    }

    @Override
    public double evaluate(double x) {
        return value;
    }

    @Override
    public ExpressionNode derivative() {
        return new ConstantNode(0);
    }

    @Override
    public String toString() {
        // if (value == 0) return "";  // 如果是0返回空字符串
        return String.valueOf(value);
    }

    public double getValue() {
        return value;
    }
}

package com.GSP.function;

/*
 * 万物归宗的表达式基本节点抽象类
 * 非常非常抽象，的类
 * 长得像一个接口
 */
public abstract class ExpressionNode {
    public abstract double evaluate(double x);
    public abstract ExpressionNode derivative();
    public abstract String toString();
}

package com.GSP.function;

public class ExpressionParser {
    private String expression;
    private int position;
    
    public ExpressionParser(String expression) {
        this.expression = expression.replaceAll("\\s+", "");
        this.position = 0;
    }
    
    public ExpressionNode parse() {
        ExpressionNode node = parseAddSubtract();
        if (position < expression.length()) {
            throw new IllegalArgumentException("Unexpected character at position " + position);
        }
        return node;
    }
    
    private ExpressionNode parseAddSubtract() {
        // 处理表达式开头的一元运算符
        String unaryOp = "";
        if (position < expression.length() && (expression.charAt(position) == '+' || expression.charAt(position) == '-')){
            unaryOp = String.valueOf(expression.charAt(position));
            position++;
        }

        ExpressionNode left = parseMultiplyDivide();

        if (!unaryOp.isEmpty()) {
            left = new UnaryOperatorNode(unaryOp, left);
        }

        while (position < expression.length()) {
            char op = expression.charAt(position);
            if (op != '+' && op != '-') break;
            position++;

            // 检查是否是连续的运算符，类似于(1 -- 2)
            String nextUnaryOp = "";
            if (position < expression.length() && (expression.charAt(position) == '+' || expression.charAt(position) == '-')) {
                nextUnaryOp = String.valueOf(expression.charAt(position));
                position++;
            }

            ExpressionNode right = parseMultiplyDivide();

            if (!nextUnaryOp.isEmpty()) {
                right = new UnaryOperatorNode(nextUnaryOp, right);
            }

            left = new BinaryOperatorNode(String.valueOf(op), left, right);
        }
        return left;
    }
    
    private ExpressionNode parseMultiplyDivide() {
        ExpressionNode left = parsePower();
        while (position < expression.length()) {
            char op = expression.charAt(position);
            if (op != '*' && op != '/') break;
            position++;

            String unaryOp = "";
            if (position < expression.length() && (expression.charAt(position) == '+' || expression.charAt(position) == '-')) {
                unaryOp = String.valueOf(expression.charAt(position));
                position++;
            }

            ExpressionNode right = parsePower();

            if (!unaryOp.isEmpty()) {
                right = new UnaryOperatorNode(unaryOp, right);
            }
            left = new BinaryOperatorNode(String.valueOf(op), left, right);
        }
        return left;
    }
    
    private ExpressionNode parsePower() {
        ExpressionNode left = parsePrimary();
        while (position < expression.length()) {
            char op = expression.charAt(position);
            if (op != '^') break;
            position++;

            String unaryOp = "";
            if (position < expression.length() && (expression.charAt(position) == '+' || expression.charAt(position) == '-')) {
                unaryOp = String.valueOf(expression.charAt(position));
                position++;
            }
            
            ExpressionNode right = parsePrimary();

            if (!unaryOp.isEmpty()) {
                right = new UnaryOperatorNode(unaryOp, right);
            }

            left = new BinaryOperatorNode(String.valueOf(op), left, right);
        }
        return left;
    }
    
    private ExpressionNode parsePrimary() {
        if (position >= expression.length()) {
            throw new IllegalArgumentException("Unexpected end of expression");
        }
        
        char c = expression.charAt(position);

        // 处理一元运算符
        if (c == '+' || c == '-') {
            position++;
            ExpressionNode operand = parsePrimary();
            return new UnaryOperatorNode(String.valueOf(c), operand);
        }
        
        // 处理数字
        if (Character.isDigit(c) || c == '.') {
            StringBuilder number = new StringBuilder();
            while (position < expression.length() && 
                   (Character.isDigit(expression.charAt(position)) || 
                    expression.charAt(position) == '.')) {
                number.append(expression.charAt(position++));
            }
            return new ConstantNode(Double.parseDouble(number.toString()));
        }
        
        // 处理变量
        if (c == 'x') {
            position++;
            return new VariableNode();
        }
        
        // 处理括号
        if (c == '(') {
            position++;
            ExpressionNode node = parseAddSubtract();
            if (position >= expression.length() || expression.charAt(position) != ')') {
                throw new IllegalArgumentException("Missing closing parenthesis");
            }
            position++;
            return node;
        }
        
        // 处理函数
        if (Character.isLetter(c)) {
            StringBuilder funcName = new StringBuilder();
            while (position < expression.length() && Character.isLetter(expression.charAt(position))) {
                funcName.append(expression.charAt(position++));
            }
            
            if (position < expression.length() && expression.charAt(position) == '(') {
                position++; // 跳过左括号
                
                if ("log".equals(funcName.toString())) {
                    // 处理 log(base,arg) 格式
                    StringBuilder baseStr = new StringBuilder();
                    while (position < expression.length() && Character.isDigit(expression.charAt(position))) {
                        baseStr.append(expression.charAt(position++));
                    }
                    if (position < expression.length() && expression.charAt(position) == ',') {
                        position++; // 跳过逗号
                        ExpressionNode arg = parseAddSubtract();
                        if (position < expression.length() && expression.charAt(position) == ')') {
                            position++; // 跳过右括号
                            return new FunctionNode("log", arg, Integer.parseInt(baseStr.toString()));
                        }
                    }
                    throw new IllegalArgumentException("Invalid log function format");
                } else {
                    // 处理其他函数
                    ExpressionNode arg = parseAddSubtract();
                    if (position < expression.length() && expression.charAt(position) == ')') {
                        position++; // 跳过右括号
                        return new FunctionNode(funcName.toString(), arg);
                    }
                    throw new IllegalArgumentException("Invalid function format");
                }
            }
        }
        
        throw new IllegalArgumentException("Unexpected character at position " + position + ": " + c);
    }
}

package com.GSP.function;

import java.util.Objects;

public abstract class Function {

    private static int idCounter = 1;
    private int id;

    private String expression;

    protected String type;

    public Function() {
        id = idCounter++;
    }

    public int getId() {
        return id;
    }

    // 计算函数某一点值
    public abstract double evaluate(double x);

    // 求导
    public abstract Function derivative();

    public String getExpression() {
        return expression;
    }

    public double[][] getPoints(double start, double end, int points) {
        if (points < 2) {
            throw new IllegalArgumentException("Number of points must be at least 2");
        }
        if (start > end) {
            throw new IllegalArgumentException("Start must be less than or equal to end");
        }
        
        double[][] result = new double[points][2];
        double step = (end - start) / (points - 1);
        
        for (int i = 0; i < points; i++) {
            double x = start + i * step;
            result[i][0] = x;
            try {
                result[i][1] = evaluate(x);
            } catch (Exception e) {
                result[i][1] = Double.NaN; // 处理不连续点或未定义点
            }
        }
        
        return result;
    }

    protected void setExpression(String expression) {
        this.expression = expression;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Function other = (Function) obj;
        return Objects.equals(expression, other.expression);
    }

    public static void main(String[] args) {
        ComplexFunction f = new ComplexFunction("-x^2+1");
        Function der = f.derivative();
        System.out.println(der.toString());
        System.out.println(der.evaluate(2));
    }
}

package com.GSP.function;

/*
 * 函数节点
 * 用于存储幂指对三角函数
 */
public class FunctionNode extends ExpressionNode {
    private String functionName;
    private ExpressionNode argument;
    private Integer base;  // 对数的底数

    public FunctionNode(String functionName, ExpressionNode argument) {
        this(functionName, argument, null);
    }

    public FunctionNode(String functionName, ExpressionNode argument, Integer base) {
        this.functionName = functionName;
        this.argument = argument;
        this.base = base;
    }

    @Override
    public double evaluate(double x) {
        double arg = argument.evaluate(x);
        return switch(functionName) {
            case "sin" -> Math.sin(arg);
            case "cos" -> Math.cos(arg);
            case "tan" -> Math.tan(arg);
            case "ln" -> Math.log(arg);
            case "log" -> {
                if (base == null) throw new IllegalStateException("Base not specified for log");
                yield Math.log(arg) / Math.log(base);
            }
            default -> throw new UnsupportedOperationException("Unknown function: " + functionName);
        };
    }

    @Override
    public ExpressionNode derivative() {
        return switch(functionName) {
            case "sin" -> new BinaryOperatorNode("*", 
                new FunctionNode("cos", argument), 
                argument.derivative());

            case "cos" -> new BinaryOperatorNode("*",
                new BinaryOperatorNode("*", new ConstantNode(-1), new FunctionNode("sin", argument)),
                argument.derivative());

            case "tan" -> new BinaryOperatorNode("*",
                new BinaryOperatorNode("+", new ConstantNode(1), 
                new BinaryOperatorNode("^", new FunctionNode("tan", argument), new ConstantNode(2))),
                argument.derivative());

            case "ln" -> new BinaryOperatorNode("*",
                new BinaryOperatorNode("/", new ConstantNode(1), argument),
                argument.derivative());

            case "log" -> new BinaryOperatorNode("*",
                new BinaryOperatorNode("/", new ConstantNode(1), 
                new BinaryOperatorNode("*", argument, new FunctionNode("ln", new ConstantNode(base)))),
                argument.derivative());

            default -> throw new UnsupportedOperationException("Unknown function: " + functionName);
        };
    }

    @Override
    public String toString() {
        if ("log".equals(functionName)) {
            return "log(" + base + "," + argument.toString() + ")";
        }
        return functionName + "(" + argument.toString() + ")";
    }

    public ExpressionNode getArgument() {
        return argument;
    }

    public String getFunctionName() {
        return functionName;
    }

    public Integer getBase() {
        return base;
    }
}


package com.GSP.function;

/*
 * 用于存放表达式
 */
public class MathExpression {
    private ExpressionNode root;
    
    public MathExpression(String expression) {
        ExpressionParser parser = new ExpressionParser(expression);
        
        // 不能解析空字符串，但是求导的时候会传入，所以也不能直接异常处理。。。
        if (!expression.equals("")) this.root = parser.parse();  
    }
    
    public double evaluate(double x) {
        return root.evaluate(x);
    }
    
    public MathExpression derivative() {
        // 创建一个新的MathExpression对象，但不通过解析而是直接设置其根节点
        MathExpression result = new MathExpression("");
        result.root = root.derivative();
        return result;
    }
    
    @Override
    public String toString() {
        return root.toString();
    }

    /*
     * 用于测试
     */

    public static void main(String[] args) {
        try {
            MathExpression expr = new MathExpression("sin(x) * 2 + 1");
            MathExpression der = expr.derivative();
            System.out.println("derive of " + expr.toString() + " is " + der.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

package com.GSP.function;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PolynomialFunction extends Function {
    // 存储多项式的系数，index表示次数，value表示系数
    private double[] coefficients;
    
    /**
     * 构造多项式函数
     * @param coefficients 系数数组，从低次项到高次项
     * Example: 对于函数 3x^2 + 2x + 1, coefficients = [1, 2, 3]
     */
    public PolynomialFunction(double[] coefficients) {
        this.type = "polynomial";
        if (coefficients == null || coefficients.length == 0) {
            throw new IllegalArgumentException("Coefficients array cannot be null or empty");
        }
        
        // 移除高次项中的0系数
        int lastNonZero = coefficients.length - 1;
        while (lastNonZero > 0 && Math.abs(coefficients[lastNonZero]) < 1e-10) {
            lastNonZero--;
        }
        
        // 创建新的系数数组，只包含有效系数
        this.coefficients = new double[lastNonZero + 1];
        System.arraycopy(coefficients, 0, this.coefficients, 0, lastNonZero + 1);
    }
    
    /**
     * 构造多项式函数
     * @param expression 多项式表达式，例如 "x^2+2x+1" 或 "-x^3+2x^2-4x+5"
     */
    public PolynomialFunction(String expression) {
        this.type = "polynomial";
        if (expression == null || expression.trim().isEmpty()) {
            throw new IllegalArgumentException("Expression cannot be null or empty");
        }

        // 预处理表达式
        expression = preProcessExpression(expression);
        
        // 找出最高次数
        int maxDegree = findMaxDegree(expression);
        double[] coeffs = new double[maxDegree + 1];
        
        // 解析每一项
        Pattern termPattern = Pattern.compile("([+-]?\\s*(?:\\d*\\.?\\d*)?)?x\\^?(\\d*)|([+-]?\\s*\\d+\\.?\\d*)");
        Matcher matcher = termPattern.matcher(expression);
        
        while (matcher.find()) {
            // 系数
            String coeffStr = matcher.group(1);
            // 指数
            String powerStr = matcher.group(2);
            // 常数项
            String constStr = matcher.group(3);
            
            if (constStr != null) {
                // 处理常数项
                coeffs[0] += parseCoefficient(constStr);
            } else {
                // 处理含x的项
                int power = powerStr.isEmpty() ? 1 : Integer.parseInt(powerStr);
                double coeff = parseCoefficient(coeffStr);
                coeffs[power] += coeff;
            }
        }
        
        // 使用原有构造函数创建多项式
        this.coefficients = coeffs;
        this.setExpression(this.toString());
        System.out.println(this.getExpression());
    }
    
    /**
     * 预处理表达式，标准化格式
     */
    private String preProcessExpression(String expression) {
        expression = expression.replaceAll("\\s+", "");
        
        // 之后可能会用到，不过现在没bug就线不加了
        // if (!expression.startsWith("+") && !expression.startsWith("-")) {
        //     expression = "+" + expression;
        // }
        
        expression = expression.replaceAll("\\+\\+", "+");
        expression = expression.replaceAll("\\+-", "-");
        expression = expression.replaceAll("-\\+", "-");
        expression = expression.replaceAll("--", "+");
        
        return expression;
    }
    
    /**
     * 解析系数
     */
    private double parseCoefficient(String coeffStr) {
        if (coeffStr == null || coeffStr.trim().isEmpty() || coeffStr.equals("+")) {
            return 1.0;
        }
        if (coeffStr.equals("-")) {
            return -1.0;
        }
        return Double.parseDouble(coeffStr);
    }
    
    /**
     * 找出多项式的最高次数
     */
    private int findMaxDegree(String expression) {
        Pattern degreePattern = Pattern.compile("x\\^?(\\d*)");
        Matcher matcher = degreePattern.matcher(expression);
        int maxDegree = 0;
        
        while (matcher.find()) {
            String degreeStr = matcher.group(1);
            int degree = degreeStr.isEmpty() ? 1 : Integer.parseInt(degreeStr);
            maxDegree = Math.max(maxDegree, degree);
        }
        
        return maxDegree;
    }
    
    /**
     * 获取多项式的次数
     * @return 多项式次数
     */
    public int getDegree() {
        return coefficients.length - 1;
    }
    
    /**
     * 获取所有系数
     * @return 系数数组的副本
     */
    public double[] getCoefficients() {
        return coefficients.clone();
    }
    
    /**
     * 获取指定次数的系数
     * @param power 次数
     * @return 对应的系数
     */
    public double getCoefficient(int power) {
        if (power < 0 || power >= coefficients.length) {
            return 0.0;
        }
        return coefficients[power];
    }
    
    // toString方法还原表达式
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        
        for (int i = coefficients.length - 1; i >= 0; i--) {
            if (Math.abs(coefficients[i]) < 1e-10) continue;
            
            if (coefficients[i] > 0 && !first) {
                sb.append("+");
            }
            
            if (Math.abs(coefficients[i] - 1.0) > 1e-10 || i == 0) {
                sb.append(coefficients[i]);
            }
            
            if (i > 0) {
                sb.append("x");
                if (i > 1) {
                    sb.append("^").append(i);
                }
            }
            
            first = false;
        }
        
        return sb.length() == 0 ? "0" : sb.toString();
    }
    
    @Override
    public double evaluate(double x) {
        
        double result = 0;
        for (int i = 0; i < coefficients.length; i++) {
            result += coefficients[i] * Math.pow(x, i);
        }
        return result;
    }
    
    @Override
    public Function derivative() {
        if (coefficients.length <= 1) {
            return new PolynomialFunction(new double[]{0}); // 常数的导数为0
        }
        
        double[] derivCoeffs = new double[coefficients.length - 1];
        for (int i = 1; i < coefficients.length; i++) {
            derivCoeffs[i - 1] = coefficients[i] * i;
        }
        
        return new PolynomialFunction(derivCoeffs);
    }



    
    // 测试用的不用管
    public static void main(String[] args) {
        PolynomialFunction f = new PolynomialFunction("3x^4 - x^3 + 2x^2 + 1");
        // for (int i = 0; i < f.coefficients.length; i++) {
        //     System.out.println(f.coefficients[i]);
        // }

        Function der = f.derivative();
        System.out.println(der.toString());

        // System.out.println(f.getExpression());
        // System.out.println(f.getId());
    }
}

package com.GSP.function;

/*
 * 单元运算符
 * 这是用于处理如 -x, sin(-x), -ln(x)等表达式的类
 */
public class UnaryOperatorNode extends ExpressionNode {
    private String operator;
    private ExpressionNode operand;
    
    public UnaryOperatorNode(String operator, ExpressionNode operand) {
        this.operator = operator;
        this.operand = operand;
    }
    
    @Override
    public double evaluate(double x) {
        double val = operand.evaluate(x);
        return switch(operator) {
            case "-" -> -val;
            case "+" -> val;
            default -> throw new UnsupportedOperationException("Unknown unary operator: " + operator);
        };
    }
    
    @Override
    public ExpressionNode derivative() {
        return switch(operator) {
            case "-" -> new UnaryOperatorNode("-", operand.derivative());
            case "+" -> operand.derivative();
            default -> throw new UnsupportedOperationException("Unknown unary operator: " + operator);
        };
    }
    
    @Override
    public String toString() {
        return operator + operand.toString();
    }

    public ExpressionNode getOperand() {
        return operand;
    }

    public String getOperator() {
        return operator;
    }
}


package com.GSP.function;

/*
 * 存放自变量节点
 */
public class VariableNode extends ExpressionNode {

    /*
     * 这东西看起来很蠢
     */
    @Override
    public double evaluate(double x) {
        return x;
    }

    @Override
    public ExpressionNode derivative() {
        return new ConstantNode(1);
    }

    @Override
    public String toString() {
        return "x";
    }
}

package com.GSP.function;

public class ExpressionSimplifier {
    
    public static ExpressionNode simplify(ExpressionNode node) {
        if (node == null) return null;
        
        // 递归简化子节点
        if (node instanceof BinaryOperatorNode) {
            BinaryOperatorNode bNode = (BinaryOperatorNode) node;
            ExpressionNode left = simplify(((BinaryOperatorNode) node).getLeft());
            ExpressionNode right = simplify(((BinaryOperatorNode) node).getRight());
            
            // 常数折叠
            if (left instanceof ConstantNode && right instanceof ConstantNode) {
                double result = node.evaluate(0); // 常数表达式求值与x无关
                return new ConstantNode(result);
            }
            
            // 加法和乘法的特殊处理
            switch (bNode.getOperator()) {
                case "+":
                    // 0 + x = x
                    if (left instanceof ConstantNode && Math.abs(((ConstantNode) left).getValue()) < 1e-10) {
                        return right;
                    }
                    // x + 0 = x
                    if (right instanceof ConstantNode && Math.abs(((ConstantNode) right).getValue()) < 1e-10) {
                        return left;
                    }
                    break;
                    
                case "*":
                    // 1 * x = x
                    if (left instanceof ConstantNode && Math.abs(((ConstantNode) left).getValue() - 1) < 1e-10) {
                        return right;
                    }
                    // x * 1 = x
                    if (right instanceof ConstantNode && Math.abs(((ConstantNode) right).getValue() - 1) < 1e-10) {
                        return left;
                    }
                    // 0 * x = 0
                    if ((left instanceof ConstantNode && Math.abs(((ConstantNode) left).getValue()) < 1e-10) ||
                        (right instanceof ConstantNode && Math.abs(((ConstantNode) right).getValue()) < 1e-10)) {
                        return new ConstantNode(0);
                    }
                    break;
                    
                case "^":
                    // x^0 = 1
                    if (right instanceof ConstantNode && Math.abs(((ConstantNode) right).getValue()) < 1e-10) {
                        return new ConstantNode(1);
                    }
                    // x^1 = x
                    if (right instanceof ConstantNode && Math.abs(((ConstantNode) right).getValue() - 1) < 1e-10) {
                        return left;
                    }
                    break;
            }
            
            return new BinaryOperatorNode(bNode.getOperator(), left, right);
        }
        
        // 函数节点简化
        if (node instanceof FunctionNode) {
            FunctionNode fNode = (FunctionNode) node;
            ExpressionNode simplifiedArg = simplify(fNode.getArgument());
            
            // 如果参数是常数，直接计算函数值
            if (simplifiedArg instanceof ConstantNode) {
                double result = node.evaluate(0);
                return new ConstantNode(result);
            }
            
            return new FunctionNode(fNode.getFunctionName(), simplifiedArg, fNode.getBase());
        }
        
        // 一元运算符节点简化
        if (node instanceof UnaryOperatorNode) {
            UnaryOperatorNode uNode = (UnaryOperatorNode) node;
            ExpressionNode simplifiedOperand = simplify(uNode.getOperand());
            
            // 如果操作数是常数，直接计算结果
            if (simplifiedOperand instanceof ConstantNode) {
                double result = node.evaluate(0);
                return new ConstantNode(result);
            }
            
            // --x = x
            if (uNode.getOperator().equals("-") && simplifiedOperand instanceof UnaryOperatorNode) {
                UnaryOperatorNode innerNode = (UnaryOperatorNode) simplifiedOperand;
                if (innerNode.getOperator().equals("-")) {
                    return simplify(innerNode.getOperand());
                }
            }
            
            return new UnaryOperatorNode(uNode.getOperator(), simplifiedOperand);
        }
        
        return node;
    }
}
